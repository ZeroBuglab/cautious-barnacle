from aiogram.types import BufferedInputFile
import io
import asyncio
import datetime
import requests
import pandas as pd
import matplotlib
matplotlib.use("Agg")
import mplfinance as mpf

from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler


TOKEN = "8234999691:AAFyTz6zqqGPfgdZNMv1vwbzr6UxEMvH1iw"
SYMBOL_DEFAULT = "BTCUSDT"
INTERVAL_DEFAULT = "1h"
CANDLES_DEFAULT = 24


bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


subscribers: set[int] = set()


def fetch_klines_binance(symbol: str, interval: str, limit: int) -> pd.DataFrame:
    """–ó–∞–±–∏—Ä–∞–µ–º —Å–≤–µ—á–∏ —Å Binance –∏ –≥–æ—Ç–æ–≤–∏–º DataFrame –¥–ª—è mplfinance."""
    url = "https://api.binance.com/api/v3/klines"
    params = {"symbol": symbol, "interval": interval, "limit": limit}
    resp = requests.get(url, params=params, timeout=15)
    resp.raise_for_status()
    data = resp.json()

    if not data:
        raise RuntimeError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Binance")

    df = pd.DataFrame(
        data,
        columns=[
            "time", "open", "high", "low", "close",
            "volume", "close_time", "qav", "num_trades",
            "taker_base_vol", "taker_quote_vol", "ignore"
        ],
    )

    df["time"] = pd.to_datetime(df["time"], unit="ms")
    df.set_index("time", inplace=True)


    cols = ["open", "high", "low", "close", "volume"]
    df[cols] = df[cols].astype(float)


    df = df.rename(
        columns={
            "open": "Open",
            "high": "High",
            "low": "Low",
            "close": "Close",
            "volume": "Volume",
        }
    )

    return df[["Open", "High", "Low", "Close", "Volume"]]

def render_chart_to_bytes(df: pd.DataFrame, symbol: str) -> bytes:
    """–†–∏—Å—É–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º PNG-–±–∞–π—Ç—ã (–±–µ–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ)."""
    buf = io.BytesIO()
    mpf.plot(
        df,
        type="candle",
        mav=(7, 14),
        volume=True,
        style="charles",
        savefig=dict(fname=buf, dpi=120, bbox_inches="tight"),
    )
    buf.seek(0)
    return buf.read()


async def make_chart_async(symbol: str = SYMBOL_DEFAULT,
                           interval: str = INTERVAL_DEFAULT,
                           limit: int = CANDLES_DEFAULT) -> bytes:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ ‚Äî —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª."""
    loop = asyncio.get_running_loop()
    df = await loop.run_in_executor(None, fetch_klines_binance, symbol, interval, limit)
    png_bytes = await loop.run_in_executor(None, render_chart_to_bytes, df, symbol)
    return png_bytes


@router.message(Command("start"))
async def cmd_start(message: Message):
    subscribers.add(message.chat.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏—Å—ã–ª–∞—é –≥—Ä–∞—Ñ–∏–∫–∏ –∫—Ä–∏–ø—Ç—ã \n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /btc ‚Äî –≥—Ä–∞—Ñ–∏–∫ BTC/USDT (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —Å–≤–µ—á–∏ 1h)\n"
        "‚Ä¢ /sub ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å\n"
        "‚Ä¢ /unsub ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∞–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏\n"
    )

@router.message(Command("btc"))
async def cmd_btc(message: Message):
    try:
        png = await make_chart_async("BTCUSDT", "1h", 24)
        photo = BufferedInputFile(png,filename="chart.png")
        await message.answer_photo(
            photo=photo,
            caption=f"üìä BTC/USDT ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–Ω–∞ {datetime.datetime.now():%d.%m %H:%M})"
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

@router.message(Command("sub"))
async def cmd_sub(message: Message):
    subscribers.add(message.chat.id)
    await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∂–¥—ã–π —á–∞—Å.")

@router.message(Command("unsub"))
async def cmd_unsub(message: Message):
    subscribers.discard(message.chat.id)
    await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")


async def broadcast_chart():
    if not subscribers:
        return
    try:
        png = await make_chart_async("BTCUSDT", "1h", 24)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
        print(f"[broadcast] –æ—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return

    for chat_id in list(subscribers):
        try:
            photo = BufferedInputFile(png,filename="chart.png")
            await bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=f"‚è∞ –ï–∂–µ—á–∞—Å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ BTC/USDT (–Ω–∞ {datetime.datetime.now():%d.%m %H:%M})"
            )
        except Exception as e:
            print(f"[broadcast] –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {chat_id}: {e}")


async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    scheduler = AsyncIOScheduler()
    # –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
    scheduler.add_job(broadcast_chart, "interval", minutes=60)
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
